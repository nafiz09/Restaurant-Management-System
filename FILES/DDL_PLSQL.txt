CREATE TABLE CUSTOMERS
(
	CUSTOMER_ID INTEGER,
	NAME VARCHAR(20),
	EMAIL VARCHAR(20),
	PHONE_NUM INTEGER,
	PASSWORD VARCHAR(100),
	CONSTRAINT C_PK PRIMARY KEY (CUSTOMER_ID)
);



CREATE TABLE CART
(
	CART_ID NUMBER,
	CUSTOMER_ID NUMBER,
	CONSTRAINT CART_PK PRIMARY KEY (CART_ID),
	CONSTRAINT C_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS
);



CREATE TABLE FOOD
(
	FOOD_ID INTEGER,
	NAME VARCHAR(20),
	PRICE FLOAT,
	DESCRIPTION VARCHAR(50),
	PICTURE VARCHAR(80),
	CONSTRAINT F_PK PRIMARY KEY (FOOD_ID)
);



CREATE TABLE MANAGER
(
	MANAGER_ID INTEGER,
	NAME VARCHAR(20),
	EMAIL VARCHAR(20),
	PHONE_NUM VARCHAR(15),
	PASSWORD VARCHAR(100),
	ADDRESS VARCHAR(50),
	CONSTRAINT M_PK PRIMARY KEY (MANAGER_ID)
);



CREATE TABLE JOB_TYPE
(
	JOB_ID INTEGER,
	JOB_NAME VARCHAR(15),
	CONSTRAINT J_PK PRIMARY KEY(JOB_ID)
);



CREATE TABLE EMPLOYEES
(
	EMPLOYEE_ID INTEGER,
	NAME VARCHAR(20),
	PHONE_NUM INTEGER,
	JOB_ID INTEGER,
	SALARY INTEGER,
	CONSTRAINT E_PK PRIMARY KEY (EMPLOYEE_ID),
	CONSTRAINT J_FK FOREIGN KEY (JOB_ID) REFERENCES JOB_TYPE
);



CREATE TABLE EXPENSE_CATEGORY
(
	CATEGORY_ID INTEGER,
	CATEGORY_NAME VARCHAR(15),
	CONSTRAINT CE_PK PRIMARY KEY(CATEGORY_ID)
);



CREATE TABLE EXPENSES
(
	EXPENSE_ID INTEGER,
	MANAGER_ID INTEGER,
	CATEGORY_ID INTEGER,
	AMOUNT FLOAT,
	DESCRIPTION VARCHAR(100),
	DATE_ADDED DATE,
	CONSTRAINT EX_PK PRIMARY KEY (EXPENSE_ID),
	CONSTRAINT M_FK FOREIGN KEY (MANAGER_ID) REFERENCES MANAGER,
	CONSTRAINT CE_FK FOREIGN KEY (CATEGORY_ID) REFERENCES EXPENSE_CATEGORY

);



CREATE TABLE CART_ITEMS
(
	ITEM_ID INTEGER,
	CART_ID INTEGER,
	FOOD_ID INTEGER,
	QUANTITY INTEGER,
	CONSTRAINT I_PK PRIMARY KEY (ITEM_ID),
	CONSTRAINT CART_FK FOREIGN KEY(CART_ID) REFERENCES CART,
	CONSTRAINT F_FK FOREIGN KEY(FOOD_ID) REFERENCES FOOD
);



CREATE TABLE ON_ORDER
(
	ORDER_ID VARCHAR(15),
	CUSTOMER_ID INTEGER,
	DELIVARY_ADDRESS VARCHAR(100),
	TOTAL_BILL FLOAT,
	DATE_TIME TIMESTAMP,
	STATUS VARCHAR(10),
	CONSTRAINT O_PK PRIMARY KEY(ORDER_ID),
	CONSTRAINT C2_FK FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMERS
);


CREATE TABLE OFF_ORDER
(
	ORDER_ID VARCHAR(15),
	TABLE_NO INTEGER,
	TOTAL_BILL FLOAT,
	DATE_TIME TIMESTAMP,
	MANAGER_ID INTEGER,
	EMPLOYEE_ID INTEGER,
	CONSTRAINT O2_PK PRIMARY KEY(ORDER_ID),
	CONSTRAINT M3_FK FOREIGN KEY(MANAGER_ID) REFERENCES MANAGER,
	CONSTRAINT E3_FK FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEES
);


CREATE TABLE ORDERED_ITEMS
(
	ITEM_ID INTEGER,
	ORDER_ID VARCHAR(15),
	FOOD_ID INTEGER,
	QUANTITY INTEGER,
	CONSTRAINT I2_PK PRIMARY KEY(ITEM_ID),
	CONSTRAINT O_FK FOREIGN KEY(ORDER_ID) REFERENCES OFF_ORDER,
	CONSTRAINT F2_FK FOREIGN KEY(FOOD_ID) REFERENCES FOOD
);



PROCEDURES
--------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE INSERT_OFF_ORDER(ORDER_ID IN VARCHAR2, T_NO IN NUMBER, MAN_NAME IN VARCHAR2, EMP_NAME IN VARCHAR2) IS
	MAN_ID NUMBER;
	EMP_ID NUMBER;
	BILL FLOAT;
BEGIN
	SELECT MANAGER_ID INTO MAN_ID FROM MANAGER WHERE NAME = MAN_NAME;
	SELECT EMPLOYEE_ID INTO EMP_ID FROM EMPLOYEES WHERE NAME = EMP_NAME;
	BILL := TOTAL_BILL(ORDER_ID);
	INSERT INTO OFF_ORDER(ORDER_ID, TABLE_NO, TOTAL_BILL, DATE_TIME, MANAGER_ID, EMPLOYEE_ID) VALUES (		ORDER_ID, T_NO, BILL, SYSDATE, MAN_ID, EMP_ID);
END;



CREATE OR REPLACE PROCEDURE INSERT_ON_ORDER(ID IN NUMBER, ADDRESS IN VARCHAR2, ORDER_ID IN VARCHAR2) IS
	BILL FLOAT;
BEGIN
	BILL := TOTAL_BILL(ORDER_ID);
	INSERT INTO ON_ORDER(CUSTOMER_ID,DELIVARY_ADDRESS,TOTAL_BILL,DATE_TIME,ORDER_ID) VALUES (ID, ADDRESS, BILL, SYSDATE, ORDER_ID);
END;



FUNCTIONS
--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION "TOTAL_BILL" (ID  VARCHAR2)
RETURN FLOAT
AS
	ITEM_PRICE FLOAT;
	TOTAL_BILL FLOAT;
BEGIN
	TOTAL_BILL:= 0;
	FOR R IN (SELECT FOOD_ID, QUANTITY FROM ORDERED_ITEMS WHERE ORDER_ID = ID)
	LOOP
		SELECT PRICE INTO ITEM_PRICE FROM FOOD WHERE FOOD_ID = R.FOOD_ID;
		TOTAL_BILL := TOTAL_BILL + R.QUANTITY * ITEM_PRICE;
	END LOOP;

	RETURN TOTAL_BILL;
END;



CREATE OR REPLACE FUNCTION "TOTAL_BILL_ONLINE" (ID  NUMBER)
RETURN FLOAT
AS
    ITEM_PRICE FLOAT;
    TOTAL_BILL FLOAT;
BEGIN
    TOTAL_BILL:= 0;
    FOR R IN (SELECT FOOD_ID, QUANTITY FROM CART_ITEMS WHERE CART_ID = ID)
    LOOP
        SELECT PRICE INTO ITEM_PRICE FROM FOOD WHERE FOOD_ID = R.FOOD_ID;
        TOTAL_BILL := TOTAL_BILL + R.QUANTITY * ITEM_PRICE;
    END LOOP;

    RETURN TOTAL_BILL;
END;


TRIGGERS
--------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER DEL_CART_ITEMS
AFTER INSERT
ON ON_ORDER
FOR EACH ROW
DECLARE
	CART_ID_VAR NUMBER;
BEGIN
	DELETE FROM CART_ITEMS WHERE CART_ID = (SELECT CART_ID FROM CART WHERE CUSTOMER_ID = :NEW.CUSTOMER_ID);
END;



CREATE OR REPLACE TRIGGER ADD_CART
AFTER INSERT
ON CUSTOMERS
FOR EACH ROW
BEGIN
	INSERT INTO CART VALUES (:NEW.CUSTOMER_ID, :NEW.CUSTOMER_ID);
END;



CREATE OR REPLACE TRIGGER PEND
AFTER INSERT
ON ON_ORDER
FOR EACH ROW
DECLARE
BEGIN
   UPDATE ON_ORDER SET STATUS = 'Pending'
   WHERE STATUS IS NULL;
END ;


SEQUENCES
--------------------------------------------------------------------------------

CREATE SEQUENCE ON_ORDER_ID;



CREATE SEQUENCE OFF_ORDER_ID;
